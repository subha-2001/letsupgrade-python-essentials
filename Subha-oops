Ex. No:1
import java.util.Scanner;

public class EBbill {
int EBNumber;
String customerName;
int previousMonthReading;
int currentMonthReading;
int numberOfUnitsConsumed;
double charge;
int typeEBConnection;
void getCustomerDetails(){

Scanner obj=new Scanner(System.in); System.out.println("Enter the Customer Name:"); customerName=obj.nextLine(); System.out.println("Enter the Customer EB Number:"); EBNumber=obj.nextInt();

System.out.println("Enter the previous month EB reading"); previousMonthReading=obj.nextInt(); System.out.println("Enter the Current month EB reading"); currentMonthReading=obj.nextInt();

System.out.println("Enter the type of EB Connection (Domestic -1 / Commercial -2 )"); typeEBConnection=obj.nextInt();

}
void eBillCal(){
numberOfUnitsConsumed=currentMonthReading-previousMonthReading;
if(typeEBConnection==1){
if(numberOfUnitsConsumed < 101)
charge=numberOfUnitsConsumed*1;

else if(numberOfUnitsConsumed > 100 && numberOfUnitsConsumed < 201) charge=100+(numberOfUnitsConsumed-100)*2.5;

else if(numberOfUnitsConsumed>200 && numberOfUnitsConsumed < 501)
charge=100+100*2.5+(numberOfUnitsConsumed-200)*4;
else
charge=100+100*2.5+300*4+(numberOfUnitsConsumed-500)*6;
}
else{
if(numberOfUnitsConsumed < 101)
charge=numberOfUnitsConsumed*2;

else if(numberOfUnitsConsumed > 100 && numberOfUnitsConsumed < 201) charge=100+(numberOfUnitsConsumed-100)*4.5;

else if(numberOfUnitsConsumed>200 && numberOfUnitsConsumed < 501)
charge=100+100*4.5+(numberOfUnitsConsumed-200)*6;
else
charge=100+100*2.5+300*4+(numberOfUnitsConsumed-500)*7;
}
}
void display(){

String con=(typeEBConnection==1)?"Domestic":"Commercial"; System.out.println("------------------EB Bill Details-----------------------"); System.out.println("---------------------------------------------------------"); System.out.println("Customer Name :"+customerName); System.out.println("Customer EB Number :"+EBNumber); System.out.println("Previous Month Reading :"+previousMonthReading); System.out.println("Current Month Reading :"+currentMonthReading); System.out.println("Number of Units Consumed :"+numberOfUnitsConsumed); System.out.println("Type of EB Connection :"+con); System.out.println("EB Charge :"+charge); System.out.println("---------------------------------------------------------");
}

public static void main(String[] args) {
EBbill e=new EBbill();
e.getCustomerDetails();
e.eBillCal();
e.display();
}
}
Ex. No:2
package packex;

public class CurrancyDEY {
  public double dolToRup(double dollar)
  {
    return dollar*68;
   }
   public double rupToDol(double rupee)
   {
     return rupee/68;
   }
   public double euroToRup(double euro)
   {
     return euro*78;
   }
   public double rupToEuro(double rupee)
   {
     return rupee/78;
   }
   public double yenToRup(double yen)
   {
     return yen*0.6;
   }
   public double rupToYen(double rupee)
   {
     return rupee/0.6;
   }
}
package packex;
public class Distance
{
  public String kmToMeter(double kilometer)
  {
    return kilometer*1000+"Meters";
  }
  public String meterToKM(int meter)
  {
    return meter/1000+"KM"+meter%1000+"Meter(s)";
  }
}
package packex;
public class TimeConversion
{
  public int hrsToMins(int h)
  {
    return h*60;
  }
  public int hrsToSecs(int h)
  {
    return hrsToMins(h)*60;
  }
  public int hrsMinsSecsToSecs(int h,int m,int s)
  {
    return h*3600+m*60+s;
  }
  public String minsToHrs(int m)
  {
    return m/60 +"Hour(s)"+ m%60+"Minute(s)";
  }
  public String secsToHrs(int s)
  {
    int h=s/3600;
    int m=(s-(h*3600))/60;
    int sec=(s-(h*3600)-(m*60))%60;
    return h+"Hour(s)"+m+"Minute(s)"+sec+"Second(s)";
   }
}
 package packex;
import java.util.Scanner;
public class DEMOCDT
{
  double dollar,rupee,yen,euro,km;
  int hours,minutes,seconds,meter;
  CurrancyDEY c=new CurrancyDEY();
  Distance d=new Distance();
  Scanner obj=new Scanner(System.in);
  void getCurrancyInput()
  {
    System.out.println("Enter the dollar:");
    dollar=obj.nextDouble();
    System.out.println("Enter the euro:");
    euro=obj.nextDouble();
    System.out.println("Enter the yen:");
    yen=obj.nextDouble();
    System.out.println("Enter the rupee:");
    rupee=obj.nextDouble();
   }
   void conCurrancy()
   {
     System.out.println("Dollar to rupee:"+Math.ceil(c.dolToRup(dollar)));
     System.out.println("Euro to rupee:"+Math.ceil(c.euroToRup(euro)));
     System.out.println("Yen to Rupee:"+Math.ceil(c.yenToRup(yen)));
     System.out.println("Rupee to dollar:"+Math.ceil(c.rupToDol(rupee)));
     System.out.println("Rupee to euro:"+Math.ceil(c.rupToEuro(rupee)));
     System.out.println("Rupee to Yen:"+Math.ceil(c.rupToYen(rupee)));
   }
   void getDistanceInput()
   {
     System.out.println("Enter the kilometer");
     km=obj.nextDouble();
     System.out.println("Enter the meter:");
     meter=obj.nextInt();
   }
   void conDistance()
   {
     System.out.println("kilometer to meters:"+d.kmToMeter(km));
     System.out.println("Meters to kilometers:"+d.meterToKM(meter));
   }
   void getTimeInput()
   {
     System.out.println("Enter the hours");
     hours=obj.nextInt();
     System.out.println("Enter the minutes:");
     minutes=obj.nextInt();
     System.out.println("Enter the seconds:");
     seconds=obj.nextInt();
   }
   TimeConversion t=new TimeConversion();
   void conTime()
   {
     if(minutes<=60&&seconds<=60)
     System.out.println("Hours,Minutes&Seconds to seconds:"+t.hrsMinsSecsToSecs(hours,minutes,seconds));
     else
     {
       System.out.println("Hours to minutes:"+t.hrsToMins(hours));
       System.out.println("Hours to Seconds:"+t.hrsToSecs(hours));
       System.out.println("Minutes to Hours:"+t.minsToHrs(minutes));
       System.out.println("Seconds to hours:"+t.secsToHrs(seconds));
     }
   }
   public static void main(String[] args)
   {
     DEMOCDT obj=new DEMOCDT();
     obj.getCurrancyInput();
     obj.conCurrancy();
     obj.getDistanceInput();
     obj.conDistance();
     obj.getTimeInput();
     obj.conTime();
   }
}

Ex. N0:3
import java.util.Scanner;

public class EmployeeSalaryCalc {
public static void main(String args[]){
  
Scanner obj=new Scanner(System.in); Programmer p=new Programmer(); System.out.println("Enter the basic pay of Programmer"); p.getEmployeeDetails(obj.nextDouble()); p.cal();

AssistantProfessor ap=new AssistantProfessor(); System.out.println("Enter the basic pay of Assistant Professor"); ap.getEmployeeDetails(obj.nextDouble()); ap.cal();

AssociateProfessor asp=new AssociateProfessor(); System.out.println("Enter the basic pay of Associate Professor"); asp.getEmployeeDetails(obj.nextDouble()); asp.cal();

Professor prof=new Professor(); System.out.println("Enter the basic pay of Professor"); prof.getEmployeeDetails(obj.nextDouble()); prof.cal();

}
}
class Employee{
String employeeName;
int employeeID;
String address;
String mailID;
long mobileNumber;
double da,hra,pf,sc,ns,gs;
Scanner obj=new Scanner(System.in);
void getEmployeeDetails(){
System.out.println("Enter the Employee Name:");
employeeName=obj.nextLine();
System.out.println("Enter the Employee Address:");
address=obj.nextLine();
System.out.println("Enter the Employee Mail ID:");

mailID=obj.nextLine();
System.out.println("Enter the Employee ID:");
employeeID=obj.nextInt();
System.out.println("Enter the Employee Mobile Number:");
mobileNumber=obj.nextLong();
}
void display(){
System.out.println("Employee Name	:"+employeeName);
System.out.println("Employee ID	:"+employeeID);
System.out.println("Employee Address	:"+address);
System.out.println("Employee Mail ID	:"+mailID);
System.out.println("Employee Mobile Number:"+mobileNumber);
}
}
class Programmer extends Employee{
double basicPay;
public double getBasicPay() {
return basicPay;

}
public void setBasicPay(double basicPay) {
this.basicPay = basicPay;
}
void getEmployeeDetails(double bp){
super.getEmployeeDetails();
setBasicPay(bp);
}
void cal(){
da=getBasicPay()*97/100.0;
hra=getBasicPay()*10/100.0;
pf=getBasicPay()*12/100.0;
sc=getBasicPay()*1/100.0;
gs=getBasicPay()+da+hra+pf+sc;
ns=gs-pf-sc;
display();
}
void display(){
super.display();
System.out.println("Employee Gross Salary:"+gs);
System.out.println("Employee Net Salary :"+ns);
}
}
class AssistantProfessor extends Employee{
double basicPay;

public double getBasicPay() {
return basicPay;
}
public void setBasicPay(double basicPay) {
this.basicPay = basicPay;
}
void getEmployeeDetails(double bp){
super.getEmployeeDetails();
setBasicPay(bp);
}
void cal(){
da=getBasicPay()*110/100.0;
hra=getBasicPay()*20/100.0;
pf=getBasicPay()*12/100.0;
sc=getBasicPay()*5/100.0;
gs=getBasicPay()+da+hra+pf+sc;
ns=gs-pf-sc;
display();
}

void display(){
super.display();
System.out.println("Employee Gross Salary:"+gs);
System.out.println("Employee Net Salary :"+ns);
}
}
class AssociateProfessor extends Employee{
double basicPay;
public double getBasicPay() {
return basicPay;
}
public void setBasicPay(double basicPay) {
this.basicPay = basicPay;
}
void getEmployeeDetails(double bp){
super.getEmployeeDetails();
setBasicPay(bp);
}
void cal(){
da=getBasicPay()*130/100.0;
hra=getBasicPay()*30/100.0;
pf=getBasicPay()*12/100.0;
sc=getBasicPay()*10/100.0;
gs=getBasicPay()+da+hra+pf+sc;
ns=gs-pf-sc;

display();
}
void display(){
super.display();
System.out.println("Employee Gross Salary:"+gs);
System.out.println("Employee Net Salary :"+ns);
}
}







    	      





class Professor extends Employee{
double basicPay;
public double getBasicPay() {
return basicPay;
}
public void setBasicPay(double basicPay) {
this.basicPay = basicPay;
}
void getEmployeeDetails(double bp){
super.getEmployeeDetails();
setBasicPay(bp);
}

void cal(){
da=getBasicPay()*140/100.0;
hra=getBasicPay()*40/100.0;
pf=getBasicPay()*12/100.0;
sc=getBasicPay()*15/100.0;
gs=getBasicPay()+da+hra+pf+sc;
ns=gs-pf-sc;
display();
}
void display(){
super.display();
System.out.println("Employee Gross Salary:"+gs);
System.out.println("Employee Net Salary :"+ns);
}
}
Ex. No:4
import java.util.Scanner;
 interface Stack{
void push(int data);
void pop();
boolean isEmpty();
boolean isFull();
}
class StackIsOverflow extends Exception{
public StackIsOverflow(String s) {
super(s);
}
}
class StackIsUnderflow extends Exception{
public StackIsUnderflow(String s) {
super(s);
}
}
public class StackConcepts implements Stack{
int top=-1;
int elements[]=new int[5];
public boolean isEmpty(){
if (top==-1) return true;
else return false;

}
public boolean isFull(){
if(top==elements.length-1) return true;
else return false;
}
public void push(int data) {

try{
if(!isFull())
elements[++top]=data;
else
throw new StackIsOverflow(" Stack overflow ");
}
catch(StackIsOverflow e){
System.out.println("Excepion:"+e);
}
}
public void pop() {
try
{

if(!isEmpty()) System.out.println("The popped element:"+elements[top--]); else

throw new StackIsUnderflow("Stack is UnderFlow");
}

catch(StackIsUnderflow e){ System.out.println("UserDefined Exception:"+e);
}
}
void display(){
System.out.println("Stack Elements are...");
for (int i=0;i<=top;i++)
System.out.println(elements[i]);
}
public static void main(String args[]){
StackConcepts c=new StackConcepts();
Scanner obj=new Scanner(System.in);
int choice;
while(true){
System.out.println("Menu");
System.out.println("1.Push");
System.out.println("2.Pop");
System.out.println("3.Display");
System.out.println("4.Exit");
System.out.println("Enter your choice:");
choice=obj.nextInt();
switch(choice){
case 1:
System.out.println("Enter the data to be pushed");
c.push(obj.nextInt());
break;
case 2:
c.pop();
break;
case 3:
c.display();
break;
case 4:
break;
default:
System.out.println("Enter the valid choice try it once again:");
}
if (choice==4)break;
}
}
}

Ex. No:8
import java.util.Scanner;
import java.io.File;
public class FileInfo{
String name;
File f1;
void getFile(){
Scanner input=new Scanner(System.in);
System.out.println("Enterthefilename:");
name=input.nextLine();
f1=new File(name);
}
void showDetails(){
System.out.println("FileName:"+f1.getName());
System.out.println("Path:"+f1.getPath());
System.out.println("AbsPath:"+f1.getAbsolutePath());
System.out.println("Thisfileis:"+(f1.exists()?"Exists":"Doesnotexists"));
System.out.println("IsReadable:"+f1.canRead());
System.out.println("ISWritable:"+f1.canWrite());
System.out.println("TypeofFile:"+name.substring(name.lastIndexOf(".")+1));
System.out.println("FileSize:"+f1.length()+"bytes");
}
public static void main(String args[]){
FileInfo fi=new FileInfo();
fi.getFile();
fi.showDetails();
}
}
Ex. No:6
import java.util.Scanner;

public class AbractDemo {
public static void main(String args[]){
Scanner obj=new Scanner(System.in);

System.out.println("Enter the length and breadth of Rectangle class:"); Rectangle r=new Rectangle(obj.nextInt(), obj.nextInt()); r.printArea();

System.out.println("Enter the base and height of Triangle class:"); Triangle t=new Triangle(obj.nextInt(), obj.nextInt()); t.printArea();

}
}

abstract class ShapeDemo{
int length, breadth;
ShapeDemo(int l, int b){
length=l;
breadth=b;
}
abstract void printArea();
}
class Rectangle extends ShapeDemo{
Rectangle(int l, int b){
super(l,b);
}
void printArea() {
System.out.println("The Area of Rectangle is:"+length*breadth);
}
}
class Triangle extends ShapeDemo{
Triangle(int l, int b){
super(l,b);
}
@Override

void printArea() {
System.out.println("The Area of Triangle is:"+0.5*length*breadth);
}
}
